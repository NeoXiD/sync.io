// Generated by CoffeeScript 1.6.3
(function() {
  var Tracker, errors, misc,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  errors = require('./utils/errors');

  misc = require('./utils/misc');

  module.exports = Tracker = (function() {
    function Tracker(_app) {
      this._app = _app;
      this._deleteDeadShares = __bind(this._deleteDeadShares, this);
      this._deleteDeadPeers = __bind(this._deleteDeadPeers, this);
      this._shares = {};
      this._handlers = {
        get_peers: require('./packets/get_peers')
      };
      setInterval(this._deleteDeadPeers, 10000);
    }

    Tracker.prototype._deleteDeadPeers = function() {
      var NOW, peer, share, _, _ref, _ref1;
      NOW = new Date();
      _ref = this._shares;
      for (_ in _ref) {
        share = _ref[_];
        _ref1 = share.peers;
        for (_ in _ref1) {
          peer = _ref1[_];
          if (Math.round((NOW - peer.updatedAt) / 1000) > (this._app.getConfig().peerTimeout)) {
            this._app.getLogger().debug('Deleted dead peer: ' + peer.id);
            delete share.peers[peer.id];
          }
        }
      }
      return this._deleteDeadShares();
    };

    Tracker.prototype._deleteDeadShares = function() {
      var NOW, share, _, _ref, _results;
      NOW = new Date();
      _ref = this._shares;
      _results = [];
      for (_ in _ref) {
        share = _ref[_];
        if (Object.keys(share.peers).length <= 0) {
          this._app.getLogger().metric('Deleted dead share: ' + share.id);
          _results.push(delete this._shares[share.id]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Tracker.prototype.handlePacket = function(packetData, peer) {
      var packetType;
      if ((packetData.m == null) || (packetData.m.toString == null)) {
        this._app.getLogger().warning('Discarded tracker packet with invalid payload');
        return;
      }
      packetType = packetData.m.toString().toLowerCase();
      if (this._handlers[packetType] != null) {
        return this._handlers[packetType](this._app, packetData, peer);
      } else {
        return this._app.getLogger().warning('Discarded tracker packet with unknown packet type: ' + packetType);
      }
    };

    Tracker.prototype.announceShare = function(id) {
      var NOW;
      NOW = new Date();
      if (this._shares[id] != null) {
        this._app.getLogger().debug('Found existing share announcement: ' + id);
        return this._shares[id].updatedAt = NOW;
      } else {
        this._app.getLogger().metric('New share announcement: ' + id);
        return this._shares[id] = {
          id: id,
          createdAt: NOW,
          updatedAt: NOW,
          peers: {}
        };
      }
    };

    Tracker.prototype.announcePeer = function(shareId, peerData) {
      var NOW, peer, _ref, _ref1, _ref2, _ref3;
      if (this._shares[shareId] == null) {
        return;
      }
      NOW = new Date();
      this._app.getLogger().debug('Received peer announcement');
      this._app.getLogger().debug('> Peer identifier: ' + peerData.id);
      this._app.getLogger().debug('> Share identifier: ' + shareId);
      this._app.getLogger().debug('> Local address: ' + ((_ref = peerData.local) != null ? _ref.address : void 0) + ':' + ((_ref1 = peerData.local) != null ? _ref1.port : void 0));
      this._app.getLogger().debug('> Remote address: ' + ((_ref2 = peerData.remote) != null ? _ref2.address : void 0) + ':' + ((_ref3 = peerData.remote) != null ? _ref3.port : void 0));
      peer = this._shares[shareId].peers[peerData.id];
      peerData.createdAt = (peer != null ? peer.createdAt : void 0) != null ? peer.createdAt : NOW;
      peerData.updatedAt = NOW;
      return this._shares[shareId].peers[peerData.id] = peerData;
    };

    Tracker.prototype.getShares = function(format) {
      var result, share, tmpShare, _, _ref;
      result = [];
      if (format === 'json') {
        _ref = this._shares;
        for (_ in _ref) {
          share = _ref[_];
          tmpShare = misc.stripKeys(share, ['createdAt', 'updatedAt', 'id']);
          tmpShare.peers = this.getPeers(tmpShare.id, 'json');
          result.push(tmpShare);
        }
        return result;
      } else {
        throw new errors.ParameterError('Unknown format given: ' + format);
        return null;
      }
    };

    Tracker.prototype.getPeers = function(shareId, format) {
      var peer, result, _, _ref, _ref1;
      if (this._shares[shareId] == null) {
        this._app.getLogger().debug('Could not get peers for inexistent share: ' + shareId);
        return null;
      }
      result = [];
      if (format === 'json') {
        _ref = this._shares[shareId].peers;
        for (_ in _ref) {
          peer = _ref[_];
          result.push(misc.stripKeys(peer, ['createdAt', 'updatedAt', 'id', 'local', 'remote']));
        }
        return result;
      } else if (format === 'btsync') {
        _ref1 = this._shares[shareId].peers;
        for (_ in _ref1) {
          peer = _ref1[_];
          result.push({
            p: peer.binId,
            a: peer.binRemote,
            la: peer.binLocal
          });
        }
        return result;
      } else {
        throw new errors.ParameterError('Unknown format given: ' + format);
        return null;
      }
    };

    Tracker.prototype.deleteShare = function(id) {
      this._app.getLogger().metric('Flushed share announcement: ' + id);
      return delete this._shares[id];
    };

    return Tracker;

  })();

}).call(this);
