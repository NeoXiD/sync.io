// Generated by CoffeeScript 1.6.3
(function() {
  var SyncIO, SyncServer, WebServer, devnull, errors, fs, pjson;

  fs = require('fs');

  devnull = require('devnull');

  pjson = require('../../package.json');

  errors = require('./errors');

  SyncServer = require('./SyncServer');

  WebServer = require('./WebServer');

  module.exports = SyncIO = (function() {
    function SyncIO(configPath) {
      this.configPath = configPath;
      this.initializeLogging();
      this.loadConfig();
    }

    SyncIO.prototype.initializeLogging = function() {
      var _ref;
      this.log = new devnull({
        namespacing: 0,
        level: ((_ref = process.env.NODE_ENV) != null ? _ref.toLowerCase() : void 0) === 'debug' ? 8 : 7
      });
      this.log.warning('--- sync.io v' + pjson.version + ' by Pascal Mathis <dev@snapserv.net> ---');
      return this.log.warning('This application is unofficial and not affiliated or related to BitTorrent, Inc.');
    };

    SyncIO.prototype.loadConfig = function() {
      var configData, err;
      try {
        configData = fs.readFileSync(this.configPath);
        return this.config = JSON.parse(configData);
      } catch (_error) {
        err = _error;
        throw new errors.ConfigurationError('Could not load configuration file!\n' + err);
      }
    };

    SyncIO.prototype.run = function() {
      var _ref, _ref1, _ref2, _ref3;
      this.webServer = new WebServer(this);
      this.webServer.listen((_ref = this.config.webPort) != null ? _ref : 4000, (_ref1 = this.config.webAddress) != null ? _ref1 : null);
      this.syncServer = new SyncServer(this.config, this.log);
      return this.syncServer.listen((_ref2 = this.config.serverPort) != null ? _ref2 : 3000, (_ref3 = this.config.serverAddress) != null ? _ref3 : null);
    };

    return SyncIO;

  })();

}).call(this);
