// Generated by CoffeeScript 1.6.3
(function() {
  var WebServer, express, fs, path, pjson;

  express = require('express');

  path = require('path');

  fs = require('fs');

  pjson = require('../../package.json');

  module.exports = WebServer = (function() {
    function WebServer(app) {
      this.app = app;
      this.web = express();
      this.registerRoutes();
    }

    WebServer.prototype.registerRoutes = function() {
      var _this = this;
      this.web.use('/', express["static"](path.join(__dirname, '..', '..', 'web')));
      this.web.get('/api/version', function(req, res) {
        return res.send({
          version: pjson.version
        });
      });
      this.web.get('/api/flush/:sid', function(req, res) {
        var shares;
        shares = _this.app.syncServer.trackerData;
        if (shares[req.params.sid] != null) {
          delete shares[req.params.sid];
        }
        return res.send({
          success: true
        });
      });
      return this.web.get('/api/shares', function(req, res) {
        var peer, peerId, share, shareId, shares, tmp, _ref, _ref1;
        shares = [];
        _ref = _this.app.syncServer.trackerData;
        for (shareId in _ref) {
          share = _ref[shareId];
          tmp = {
            createdAt: share.createdAt,
            updatedAt: share.updatedAt,
            id: shareId,
            peers: []
          };
          _ref1 = share.peers;
          for (peerId in _ref1) {
            peer = _ref1[peerId];
            tmp.peers.push({
              createdAt: peer.createdAt,
              updatedAt: peer.updatedAt,
              id: peerId,
              rpeer: peer.rpeer[0],
              lpeer: peer.lpeer[0]
            });
          }
          shares.push(tmp);
        }
        return res.send({
          shares: shares
        });
      });
    };

    WebServer.prototype.listen = function(port, address) {
      this.web.listen(port, address);
      return this.app.log.info('sync.io web server listening on ' + address + ':' + port);
    };

    return WebServer;

  })();

}).call(this);
